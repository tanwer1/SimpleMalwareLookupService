from flask import Flask, request, jsonify
from auth import auth, get_pw
from redisClient import RedisSafetyStore
import json

app = Flask(__name__)
safeUnsafeStore = RedisSafetyStore()

class InvalidContent(Exception):
    pass

# get the resourcePath from the path passed.
def getResourceFromFullPath(prefix, full_path):
    # full path is always bigger than prefix path.
    resourcePath = full_path[len(prefix):]
    
    # TODO: the full_path inserts a '?' at the end if the full_path doesn't
    # have a '?' in the string, which is not in sync with the documentation
    # https://flask.palletsprojects.com/en/1.1.x/api/
    # Address more elegantly. For this exercise purpose just checking if 
    # last element is a '?' and drop it.
    if resourcePath[-1:]  == '?':
        return resourcePath[:-1]

    return resourcePath


# Perform some basic check on the json received for the addUrl.
def isValidAddData(content):
    if content is None:
        return False
    
    resources = content.get("resources")
    if not resources or not isinstance(resources, list):
        return False

    for url in resources:
        if not isinstance(url, str):
            return False

    return True


# Using <path:subpath> so as it flask accept all subsequent paths.
# but complex query strings doesn't go thru the path and the resourceUrl doesn't get the 
# full resource string from /v1/urlinfo/https://www.abc.com/resources?signature=abcdefetc
# to fetch the full resource path we need to parse the request.full_path.
@app.route('/v1/urlinfo/<path:subpath>', methods=['GET'])
@auth.login_required
def queryUrlSafety(subpath):
    app.logger.debug("Received: %s", subpath)
    resourcePath = getResourceFromFullPath('/v1/urlinfo/', request.full_path)
    app.logger.debug("ResourcePath: %s", resourcePath)
    safe = safeUnsafeStore.isSafe(resourcePath)
    return jsonify(isSafe=safe), 200 


@app.route('/v1/addurl', methods=['POST'])
@auth.login_required
def addUnsafeUrl():
    try:
        content = request.get_json(silent=True)
    except:
        app.logger.error("Json not found in request")
        raise

    if not isValidAddData(content):
        raise InvalidContent()

    app.logger.debug("Received: %s", json.dumps(content))
    safeUnsafeStore.addUnsafeResources(content)
    return jsonify(), 200 


if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=80, threaded=True)
